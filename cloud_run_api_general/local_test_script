build container remotely on GCP cloud build:
gcloud builds submit --tag gcr.io/influencer-272204/api_general

The following deploys the remotely built docker image to cloud run:
gcloud run deploy api-general  --image gcr.io/influencer-272204/api_general --service-account=65044462485-compute@developer.gserviceaccount.com --add-cloudsql-instances influencer-272204:us-central1:influencersql --update-env-vars INSTANCE_CONNECTION_NAME="influencer-272204:us-central1:influencersql"

Backup command to update existing services with access to cloudsql:
gcloud run services update api-general --add-cloudsql-instances influencer-272204:us-central1:influencersql --update-env-vars INSTANCE_CONNECTION_NAME="influencer-272204:us-central1:influencersql"


Local build docker image, push to remote, then deploy remotely:
docker build . --tag gcr.io/influencer-272204/api_general
docker push gcr.io/influencer-272204/api_general
gcloud run deploy api-general  --image gcr.io/influencer-272204/api_general --service-account=65044462485-compute@developer.gserviceaccount.com --add-cloudsql-instances influencer-272204:us-central1:influencersql --update-env-vars INSTANCE_CONNECTION_NAME="influencer-272204:us-central1:influencersql"


Local testing container:
first build image with docker under current folder (influencer/cloud_run_api_general)
docker build . --tag gcr.io/influencer-272204/api_general

then run the container locally:
PORT=8080 && docker run -p 9090:${PORT} -e PORT=${PORT} -e K_SERVICE=dev -e K_CONFIGURATION=dev -e K_REVISION=dev-00001 -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/keys/service_account.json -v $GOOGLE_APPLICATION_CREDENTIALS:/tmp/keys/service_account.json:ro gcr.io/influencer-272204/api_general


Manage/update client_secret in secret manager:
gcloud secrets versions add client_secret --data-file="/Users/acm/Downloads/client_secret_65044462485-6h2vnliteh06hllhb5n1o4g95h3v52tq.apps.googleusercontent.com.json"


Test /track on remote service:
curl -X POST https://api.lifo.ai/track -d @create_new_track_event.json --header "Content-Type: application/json"

Test /order_complete on remote service:
curl -X POST https://api.lifo.ai/order_complete -d @create_order_complete_event.json --header "Content-Type: application/json"

Test /orders_paid on remote service:
curl -X POST https://api.lifo.ai/orders_paid -d @new_orders_paid_webhook.json --header "Content-Type: application/json"


To obtain a testing idToken for local curl testing to by pass authentication requirements, run the following
and copy the "idToken" from the returned results json:
curl 'https://securetoken.googleapis.com/v1/token?key=AIzaSyBUv4Ms89_KK7nZ_fcw0sBHik23XH_ergA' -H 'Content-Type: application/x-www-form-urlencoded' --data 'grant_type=refresh_token&refresh_token=AE0u-Nd-J72Tyy6x-Oy474EXGplZYW6Q8rCd2vvMmvvpjaNYjgbsIpjYQsyAvAWppZf2EFaAMBXqPYwxzZ86sXJQWrDXkPE66_9KCP8LvJ17NJUwCg6C4S5QWhHL7ntUWkg8LxHNxy3NziCApIV9ElcE1j7TGKF4P3Iy-91TyABJUdLnnGxk-Tgg7It4UDT5FFok_Yb4Hex86JchsO7VmxSpSBnzwRMN0A'


Test /campaign/lifo_tracker_id locally, replace the <idToken> with the one you get above:
curl  -H "Content-Type: application/json" -H "Authorization: <idToken>" -X POST https://api.lifo.ai/campaign/lifo_tracker_id -d @create_brand_campaign_local_test.json